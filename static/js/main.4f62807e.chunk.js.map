{"version":3,"sources":["images/hand.png","components/Loader/index.js","pages/Collect.js","components/StartButton/index.js","components/Hero/index.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","targetLabel","inputs","brain","className","id","src","handit","alt","collecting","classify","finalGesture","Collect","useState","recordCount","setRecordCount","recordStatus","setRecordStatus","loadingStatus","setLoadingStatus","loading","setLoading","recordReady","setRecordReady","gestureLabels","setGestureLabels","inputEl","useRef","webcamRef","init","modelLoaded","a","console","log","video","current","videoWidth","videoHeight","width","height","options","outputs","task","debug","ml5","on","detect","useEffect","poses","length","i","landmarks","push","target","addData","gotResult","startClass","setInterval","error","results","confidence","label","save","Container","fluid","Row","Col","lg","ref","type","placeholder","onClick","value","setTimeout","includes","recordTime","alert","normalizeData","train","epochs","handleSave","window","location","reload","audio","mirrored","style","StartButton","link","href","Hero","process","xmlns","viewBox","fill","fill-opacity","d","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f62807e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hand.8e1857be.png\";","import React from \"react\";\nimport \"./style.css\";\nimport handit from '../../images/hand.png'\n\nfunction Loader() {\n    return (\n        <div className=\"text-center loading\">\n            <img id=\"loader\" src={handit} alt=\"pocit icon\" />\n            <h2 id=\"loadingStatus\">Loading</h2>\n        </div>\n    )\n}\n\nexport default Loader;\n","import React, { useRef, useEffect, useState } from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { FaCircle } from \"react-icons/fa\";\nimport * as ml5 from 'ml5';\nimport * as Webcam from 'react-webcam';\nimport Loader from \"../components/Loader\";\n\nlet collecting = false;\nlet targetLabel;\nlet inputs;\nlet brain;\nlet classify = false;\nlet finalGesture = \"\";\nconst recordTime = 7;\n\n\n\nfunction Collect() {\n\n    const [recordCount, setRecordCount] = useState(0);\n    const [recordStatus, setRecordStatus] = useState(\"\");\n    const [loadingStatus, setLoadingStatus] = useState(\"Just a moment, Train-IT is loading...\");\n    const [loading, setLoading] = useState(true);\n    const [recordReady, setRecordReady] = useState(false);\n    const [gestureLabels, setGestureLabels] = useState([]);\n    const inputEl = useRef(null);\n    const webcamRef = useRef(null);\n\n    const init = async () => {\n        const video = webcamRef.current.video;\n        const videoWidth = video.videoWidth;\n        const videoHeight = video.videoHeight;\n        video.width = videoWidth;\n        video.height = videoHeight;\n\n        let options = {\n            inputs: 63,\n            outputs: recordCount,\n            task: 'classification',\n            debug: true\n        }\n        brain = ml5.neuralNetwork(options);\n\n        const handpose = ml5.handpose(video, modelLoaded);\n        function modelLoaded() {\n            console.log('HandPose Model Loaded!');\n            setLoadingStatus(\"Ready. Follow the steps below.\");\n            setLoading(false);\n        }\n        handpose.on('predict', detect);\n    }\n\n    useEffect(() => {\n        init();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    const detect = (poses) => {\n        if (poses.length > 0) {\n            setRecordReady(true);\n            if (collecting || classify) {\n                inputs = [];\n                for (let i = 0; i < poses[0].landmarks.length; i++) {\n                    inputs.push(poses[0].landmarks[i][0]);\n                    inputs.push(poses[0].landmarks[i][1]);\n                    inputs.push(poses[0].landmarks[i][2]);\n                }\n            }\n            if (collecting) {\n                let target = [targetLabel];\n                brain.addData(inputs, target);\n            } else if (classify) {\n                brain.classify(inputs, gotResult);\n            }\n        } else {\n            setRecordReady(false);\n        }\n    }\n\n    // ==============================================================================================\n    // COLLECT\n    // ==============================================================================================\n\n    function collect() {\n        collecting = true;\n        console.log(\"Collecting Data\");\n        setTimeout(() => {\n            collecting = false;\n            if (recordCount >= 1) {\n                setLoadingStatus(\"Train-IT is ready to be trained.\");\n            }\n            setRecordStatus(\"\");\n            console.log(\"Finished Collecting\");\n            if (!gestureLabels.includes(targetLabel)) {\n                setRecordCount(recordCount + 1);\n            }\n            setGestureLabels([...gestureLabels, targetLabel]);\n        }, recordTime * 1000)\n    }\n\n    function handleRecord() {\n        if (!recordReady) {\n            alert(\"Please place your hand in view of the camera before recording\");\n        } else {\n            targetLabel = inputEl.current.value;\n            setRecordStatus(\"Recording\");\n            collect();\n        }\n    }\n\n    function handleReset() {\n        window.location.reload();\n    }\n\n\n    function handleTrain() {\n        if (recordCount > 1) {\n            brain.normalizeData();\n            brain.train({ epochs: 30 }, () => {\n                console.log(\"model trained\");\n                setLoadingStatus(\"Training Complete\");\n            });\n        }\n    }\n\n\n    // ==============================================================================================\n    // CLASSIFY\n    // ==============================================================================================\n\n    function startClass() {\n        classify = true;\n        displayClass();\n    }\n\n    function displayClass() {\n        setInterval(() => {\n            setRecordStatus(finalGesture);\n        }, 300);\n    }\n\n    function gotResult(error, results) {\n        if (results[0].confidence > 0.92) {\n            console.log(results[0].label);\n            finalGesture = results[0].label;\n        }\n    }\n\n\n    async function handleSave() {\n        brain.save();\n    }\n\n    return (\n        <div id=\"main-train\">\n            <div>\n                <h1 className=\"instructions\">{loadingStatus}</h1>\n            </div>\n            <Container fluid>\n                <Row>\n                    <Col lg={6}>\n                        <div id=\"input\">\n                            <div>\n                                <h2>{collecting ? recordStatus : (recordCount + \" Hand Gestures Recorded\")}</h2>\n                            </div>\n                            <div className=\"step\">\n                                <h6>Step 1. Name your gesture</h6>\n                                <input id=\"gInput\" ref={inputEl} type=\"text\" placeholder=\"e.g. Thumbs Up\" />\n                            </div>\n                            <div className=\"step\">\n                                <h6>Step 2. Hold up your hand to the camera and click Record. Repeat Step 1 & 2 for at least 2 gestures.</h6>\n                                <button className=\"any-btn\" onClick={handleRecord}><FaCircle/> Record</button>\n                            </div>\n                            <div className=\"step\">\n                                <h6>Step 3. Register your data with Train-It. Watch as the neural network learns your gesture.</h6>\n                                <button className=\"any-btn\" onClick={() => handleTrain()}>Train</button>\n                            </div>\n                            <div className=\"step\">\n                                <h6>Step 4. Once the training reaches 30 epochs, click \"Try It Out\" and hold up your gestures for validation.</h6>\n                                <button className=\"any-btn\" onClick={() => startClass()}>Try It Out</button>\n                            </div>\n                            <div className=\"step\">\n                                <h6>Step 5. Download your model data and use it in your app!</h6>\n                                <button className=\"any-btn\" onClick={() => handleSave()}>Download Your Model</button>\n                            </div>\n                            <div>\n                                <button id=\"delete\" className=\"any-btn\" onClick={handleReset}>Delete Gestures and Start Again</button>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col lg={6}>\n                        <div id=\"video\">\n                            <h2 id=\"record-status\">{recordStatus}</h2>\n                            {loading ? (<Loader />) : null}\n                            <Webcam id=\"webcam\" ref={webcamRef}\n                                audio={false}\n                                mirrored={true}\n                                style={{\n                                    width: 640,\n                                    height: 480\n                                }} />\n                        </div>\n\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    )\n}\n\nexport default Collect\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction StartButton({link, label}) {\n    return (\n        <a href={link} className=\"get-started-btn\">{label}</a>\n    )\n}\n\nexport default StartButton;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport StartButton from \"../StartButton\";\nimport \"./style.css\";\n\nfunction Hero() {\n    return (\n        <div>\n            <div id=\"hero\">\n                <Container fluid>\n                    <Row>\n                        <Col className=\"hleft\" lg={6}>\n                            <h1>TRAIN-IT</h1>\n                            <h3>A powerful tool that enables custom hand gesture recognition across intelligent edge applications.</h3>\n                            <div>\n                                <StartButton link=\"/#main-train\" label=\"Get Started\" />\n                            </div>\n                        </Col>\n                        <Col className=\"hero-img\" lg={6} >\n                            <img src={process.env.PUBLIC_URL + \"/images/brain.jpg\"} className=\"animated\" alt=\"provider and patient\" />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n            <div className=\"wave-container\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\"><path fill=\"#010622\" fill-opacity=\"1\" d=\"M0,192L80,208C160,224,320,256,480,250.7C640,245,800,203,960,186.7C1120,171,1280,181,1360,186.7L1440,192L1440,0L1360,0C1280,0,1120,0,960,0C800,0,640,0,480,0C320,0,160,0,80,0L0,0Z\"></path></svg>\n            </div>\n        </div>\n    )\n}\n\nexport default Hero;\n","import React from 'react'\nimport './App.css';\nimport Collect from './pages/Collect';\nimport Hero from './components/Hero';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hero />\n      <Collect />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}